import { Repository } from 'typeorm';
import { InventoryStocks, Stocks } from './entities/stocks.entity';
import { CreatestockOrderDto } from './dto/create-stock.dto';
import { User } from 'src/users/entities/user.entity';
import { Dealer } from 'src/users/entities/dealer.entity';
import { Order } from 'src/orders/entities/order.entity';
import { StocksSellOrd } from './entities/stocksOrd.entity';
import { OrderStatus } from 'src/orders/entities/order-status.entity';
import { OrderProductPivot, Product, Variation } from 'src/products/entities/product.entity';
import { ShiprocketService } from 'src/orders/shiprocket.service';
import { MailService } from 'src/mail/mail.service';
import { Coupon } from 'src/coupons/entities/coupon.entity';
import { UserAdd } from 'src/address/entities/address.entity';
import { Shop } from 'src/shops/entities/shop.entity';
import { GetOrdersDto, OrderPaginator } from 'src/orders/dto/get-orders.dto';
import { Permission } from 'src/permission/entities/permission.entity';
import { NotificationService } from 'src/notifications/services/notifications.service';
import { Cache } from '@nestjs/cache-manager';
import { CacheService } from '../helpers/cacheService';
export declare class StocksService {
    private readonly shiprocketService;
    private readonly MailService;
    private readonly notificationService;
    private readonly stocksRepository;
    private readonly inventoryStocksRepository;
    private readonly userRepository;
    private readonly dealerRepository;
    private readonly productRepository;
    private readonly StocksSellOrdRepository;
    private readonly orderProductPivotRepository;
    private readonly orderStatusRepository;
    private readonly couponRepository;
    private readonly userAddressRepository;
    private readonly shopRepository;
    private readonly permissionRepository;
    private readonly variationRepository;
    private readonly orderRepository;
    private readonly cacheManager;
    private readonly cacheService;
    constructor(shiprocketService: ShiprocketService, MailService: MailService, notificationService: NotificationService, stocksRepository: Repository<Stocks>, inventoryStocksRepository: Repository<InventoryStocks>, userRepository: Repository<User>, dealerRepository: Repository<Dealer>, productRepository: Repository<Product>, StocksSellOrdRepository: Repository<StocksSellOrd>, orderProductPivotRepository: Repository<OrderProductPivot>, orderStatusRepository: Repository<OrderStatus>, couponRepository: Repository<Coupon>, userAddressRepository: Repository<UserAdd>, shopRepository: Repository<Shop>, permissionRepository: Repository<Permission>, variationRepository: Repository<Variation>, orderRepository: Repository<Order>, cacheManager: Cache, cacheService: CacheService);
    create(createStocksDto: any): Promise<Stocks[]>;
    updateInventoryStocks(createStocksDto: any): Promise<InventoryStocks[]>;
    updateStocksbyAdmin(user_id: number, updateStkQuantityDto: any): Promise<void>;
    updateInventoryStocksByDealer(user_id: number, updateStkQuantityDto: any): Promise<void>;
    getAll(user_id: number, order_id: number): Promise<Stocks[]>;
    getAllStocks(user_id: number): Promise<unknown>;
    getDealerInventoryStocks(userId: number): Promise<any>;
    afterORD(createOrderDto: any): Promise<any>;
    OrdfromStocks(createOrderInput: CreatestockOrderDto): Promise<StocksSellOrd>;
    getOrders({ limit, page, customer_id, tracking_number, search, shop_id, }: GetOrdersDto): Promise<OrderPaginator>;
    getOrderById(id: number): Promise<any>;
    updateOrderStatus(id: number, updateOrderStatusDto: any): Promise<StocksSellOrd>;
    updatePaymentStatus(id: number, updatePaymentStatusDto: any): Promise<StocksSellOrd>;
}
