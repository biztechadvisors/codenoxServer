import { GetProductsDto, ProductPaginator } from './dto/get-products.dto';
import { UpdateProductDto, UpdateQuantityDto } from './dto/update-product.dto';
import { OrderProductPivot, Product, Variation, VariationOption } from './entities/product.entity';
import { GetPopularProductsDto } from './dto/get-popular-products.dto';
import { Attachment } from 'src/common/entities/attachment.entity';
import { Tag } from 'src/tags/entities/tag.entity';
import { Type } from 'src/types/entities/type.entity';
import { Shop } from 'src/shops/entities/shop.entity';
import { Category, SubCategory } from 'src/categories/entities/category.entity';
import { AttributeValue } from 'src/attributes/entities/attribute-value.entity';
import { Dealer, DealerCategoryMargin, DealerProductMargin } from 'src/users/entities/dealer.entity';
import { User } from 'src/users/entities/user.entity';
import { Repository } from 'typeorm';
import { Tax } from 'src/taxes/entities/tax.entity';
import { Cache } from 'cache-manager';
import { CreateProductDto } from './dto/create-product.dto';
import { Region } from '../region/entities/region.entity';
export declare class ProductsService {
    private readonly productRepository;
    private readonly orderProductPivotRepository;
    private readonly variationRepository;
    private readonly variationOptionRepository;
    private readonly attachmentRepository;
    private readonly tagRepository;
    private readonly typeRepository;
    private readonly shopRepository;
    private readonly categoryRepository;
    private readonly subCategoryRepository;
    private readonly attributeValueRepository;
    private readonly dealerRepository;
    private readonly dealerProductMarginRepository;
    private readonly dealerCategoryMarginRepository;
    private readonly userRepository;
    private readonly taxRepository;
    private readonly regionRepository;
    private readonly cacheManager;
    private readonly logger;
    constructor(productRepository: Repository<Product>, orderProductPivotRepository: Repository<OrderProductPivot>, variationRepository: Repository<Variation>, variationOptionRepository: Repository<VariationOption>, attachmentRepository: Repository<Attachment>, tagRepository: Repository<Tag>, typeRepository: Repository<Type>, shopRepository: Repository<Shop>, categoryRepository: Repository<Category>, subCategoryRepository: Repository<SubCategory>, attributeValueRepository: Repository<AttributeValue>, dealerRepository: Repository<Dealer>, dealerProductMarginRepository: Repository<DealerProductMargin>, dealerCategoryMarginRepository: Repository<DealerCategoryMargin>, userRepository: Repository<User>, taxRepository: Repository<Tax>, regionRepository: Repository<Region>, cacheManager: Cache);
    onModuleInit(): Promise<void>;
    updateProductStockStatus(): Promise<void>;
    getValueFromSearch(searchString: string, key: string): string | null;
    updateShopProductsCount(shopId: number, productId: number): Promise<void>;
    create(createProductDto: CreateProductDto): Promise<Product | {
        message: string;
    }>;
    getProducts(query: GetProductsDto): Promise<ProductPaginator>;
    private fetchDealerProducts;
    getProductBySlug(slug: string, shop_id: number, dealerId?: number): Promise<Product | undefined>;
    getPopularProducts(query: GetPopularProductsDto): Promise<Product[]>;
    update(id: number, updateProductDto: UpdateProductDto): Promise<Product>;
    remove(id: number): Promise<void>;
    updateQuantity(id: number, updateQuantityDto: UpdateQuantityDto): Promise<void>;
}
