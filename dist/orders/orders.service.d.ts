import { AuthService } from 'src/auth/auth.service';
import { PaymentIntent, PaymentIntentInfo } from 'src/payment-intent/entries/payment-intent.entity';
import { PaypalPaymentService } from 'src/payment/paypal-payment.service';
import { StripePaymentService } from 'src/payment/stripe-payment.service';
import { CreateOrderStatusDto, UpdateOrderStatusDto } from './dto/create-order-status.dto';
import { CreateOrderDto } from './dto/create-order.dto';
import { GetOrderFilesDto } from './dto/get-downloads.dto';
import { GetOrderStatusesDto, OrderStatusPaginator } from './dto/get-order-statuses.dto';
import { GetOrdersDto, OrderPaginator } from './dto/get-orders.dto';
import { UpdateOrderDto } from './dto/update-order.dto';
import { CheckoutVerificationDto, VerifiedCheckoutData } from './dto/verify-checkout.dto';
import { OrderStatus } from './entities/order-status.entity';
import { Order, OrderFiles, PaymentStatusType } from './entities/order.entity';
import { Repository } from 'typeorm';
import { User } from 'src/users/entities/user.entity';
import { File, OrderProductPivot, Product } from 'src/products/entities/product.entity';
import { Coupon } from 'src/coupons/entities/coupon.entity';
import { RazorpayService } from 'src/payment/razorpay-payment.service';
import { ShiprocketService } from 'src/orders/shiprocket.service';
import { Shop } from 'src/shops/entities/shop.entity';
import { MailService } from 'src/mail/mail.service';
import { StocksService } from 'src/stocks/stocks.service';
import { NotificationService } from 'src/notifications/services/notifications.service';
import { Cache } from 'cache-manager';
import { UserAdd } from '../address/entities/address.entity';
import { AnalyticsService } from '../analytics/analytics.service';
export declare class OrdersService {
    private readonly authService;
    private readonly analyticsService;
    private readonly stripeService;
    private readonly paypalService;
    private readonly razorpayService;
    private readonly shiprocketService;
    private readonly mailService;
    private readonly stocksService;
    private readonly notificationService;
    private readonly orderRepository;
    private readonly orderStatusRepository;
    private readonly userRepository;
    private readonly userAddressRepository;
    private readonly productRepository;
    private readonly orderFilesRepository;
    private readonly fileRepository;
    private readonly paymentIntentInfoRepository;
    private readonly paymentIntentRepository;
    private readonly orderProductPivotRepository;
    private readonly shopRepository;
    private readonly couponRepository;
    private readonly cacheManager;
    constructor(authService: AuthService, analyticsService: AnalyticsService, stripeService: StripePaymentService, paypalService: PaypalPaymentService, razorpayService: RazorpayService, shiprocketService: ShiprocketService, mailService: MailService, stocksService: StocksService, notificationService: NotificationService, orderRepository: Repository<Order>, orderStatusRepository: Repository<OrderStatus>, userRepository: Repository<User>, userAddressRepository: Repository<UserAdd>, productRepository: Repository<Product>, orderFilesRepository: Repository<OrderFiles>, fileRepository: Repository<File>, paymentIntentInfoRepository: Repository<PaymentIntentInfo>, paymentIntentRepository: Repository<PaymentIntent>, orderProductPivotRepository: Repository<OrderProductPivot>, shopRepository: Repository<Shop>, couponRepository: Repository<Coupon>, cacheManager: Cache);
    updateOrderQuantityProducts(ordProducts: any[]): Promise<void>;
    create(createOrderInput: CreateOrderDto): Promise<Order>;
    private createOrderFiles;
    private setOrderStatus;
    private applyCoupon;
    private createOrderData;
    getOrders(getOrdersDto: GetOrdersDto): Promise<OrderPaginator>;
    updateOrderInDatabase(id: number, updateOrderDto: UpdateOrderDto): Promise<Order>;
    getOrderByIdOrTrackingNumber(id: number): Promise<any>;
    private transformOrder;
    getOrderStatuses(query: GetOrderStatusesDto): Promise<OrderStatusPaginator>;
    getOrderStatus(param: string, language: string): Promise<OrderStatus | undefined>;
    update(id: number, updateOrderInput: UpdateOrderDto): Promise<Order>;
    remove(id: number): Promise<void>;
    private findOrderStatusInDatabase;
    verifyCheckout(input: CheckoutVerificationDto): Promise<VerifiedCheckoutData>;
    private updateOrderStatusInDatabase;
    createOrderStatus(createOrderStatusInput: CreateOrderStatusDto): Promise<OrderStatus>;
    updateOrderStatus(id: number, updateOrderStatusInput: UpdateOrderStatusDto): Promise<OrderStatus>;
    getOrderFileItems({ page, limit }: GetOrderFilesDto): Promise<any>;
    getOrderFiles(getOrderFilesDto: GetOrderFilesDto): Promise<any>;
    getDigitalFileDownloadUrl(digitalFileId: number): Promise<string>;
    exportOrder(shop_id: string): Promise<any[]>;
    downloadInvoiceUrl(orderId: string): Promise<void>;
    processChildrenOrder(order: Order): Order[];
    processPaymentIntent(order: Order): Promise<PaymentIntent>;
    savePaymentIntent(order: Order): Promise<any>;
    stripePay(order: Order): Promise<void>;
    paypalPay(order: Order): Promise<void>;
    razorpayPay(order: Order, paymentIntentInfo: PaymentIntentInfo): Promise<boolean>;
    private sendOrderConfirmation;
    changeOrderPaymentStatus(order: Order, paymentStatus: PaymentStatusType): Promise<void>;
}
