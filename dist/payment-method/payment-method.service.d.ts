import { AuthService } from 'src/auth/auth.service';
import { StripePaymentService } from 'src/payment/stripe-payment.service';
import { CreatePaymentMethodDto } from './dto/create-payment-method.dto';
import { DefaultCart } from './dto/set-default-card.dto';
import { UpdatePaymentMethodDto } from './dto/update-payment-method.dto';
import { PaymentMethod } from './entities/payment-method.entity';
import { User } from 'src/users/entities/user.entity';
import { Repository } from 'typeorm';
import { GetPaymentMethodsDto } from './dto/get-payment-methods.dto';
export declare class PaymentMethodService {
    private readonly authService;
    private readonly stripeService;
    private paymentMethodRepository;
    constructor(authService: AuthService, stripeService: StripePaymentService, paymentMethodRepository: Repository<PaymentMethod>);
    create(createPaymentMethodDto: CreatePaymentMethodDto, user: User): Promise<{
        id: number;
        method_key: string;
        payment_gateway_id: number;
        default_card: boolean;
        fingerprint: string;
        owner_name: string;
        last4: string;
        expires: string;
        network: string;
        type: string;
        origin: string;
        verification_check: any;
        created_at: Date;
        updated_at: Date;
    } & PaymentMethod>;
    findAll(query: GetPaymentMethodsDto): Promise<PaymentMethod[]>;
    findOne(id: number): Promise<PaymentMethod>;
    update(id: number, updatePaymentMethodDto: UpdatePaymentMethodDto): Promise<PaymentMethod>;
    remove(id: number): Promise<PaymentMethod>;
    saveDefaultCart(defaultCart: DefaultCart): Promise<PaymentMethod>;
    savePaymentMethod(createPaymentMethodDto: CreatePaymentMethodDto, user: User): Promise<{
        id: number;
        method_key: string;
        payment_gateway_id: number;
        default_card: boolean;
        fingerprint: string;
        owner_name: string;
        last4: string;
        expires: string;
        network: string;
        type: string;
        origin: string;
        verification_check: any;
        created_at: Date;
        updated_at: Date;
    } & PaymentMethod>;
    saveCard(createPaymentMethodDto: CreatePaymentMethodDto, paymentGateway: string, user: User): Promise<{
        id: number;
        method_key: string;
        payment_gateway_id: number;
        default_card: boolean;
        fingerprint: string;
        owner_name: string;
        last4: string;
        expires: string;
        network: string;
        type: string;
        origin: string;
        verification_check: any;
        created_at: Date;
        updated_at: Date;
    } & PaymentMethod>;
    paymentMethodAlreadyExists(fingerPrint: string): boolean;
    makeNewPaymentMethodObject(createPaymentMethodDto: CreatePaymentMethodDto, paymentGateway: string, user: User): Promise<{
        id: number;
        method_key: string;
        payment_gateway_id: number;
        default_card: boolean;
        fingerprint: string;
        owner_name: string;
        last4: string;
        expires: string;
        network: string;
        type: string;
        origin: string;
        verification_check: any;
        created_at: Date;
        updated_at: Date;
    }>;
}
