import { CreateUserDto } from './dto/create-user.dto';
import { GetUsersDto, UserPaginator } from './dto/get-users.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { User } from './entities/user.entity';
import { Profile, Social } from './entities/profile.entity';
import { Attachment } from 'src/common/entities/attachment.entity';
import { CreateProfileDto } from './dto/create-profile.dto';
import { DealerDto } from './dto/add-dealer.dto';
import { Dealer, DealerCategoryMargin, DealerProductMargin } from './entities/dealer.entity';
import { Product } from 'src/products/entities/product.entity';
import { Category } from 'src/categories/entities/category.entity';
import { Shop } from 'src/shops/entities/shop.entity';
import { AuthService } from 'src/auth/auth.service';
import { Repository } from 'typeorm';
import { Permission } from 'src/permission/entities/permission.entity';
import { UpdateProfileDto } from './dto/update-profile.dto';
import { Cache } from 'cache-manager';
import { Add } from '../address/entities/address.entity';
import { AddressesService } from '../address/addresses.service';
import { AnalyticsService } from '../analytics/analytics.service';
export declare class UsersService {
    private readonly userRepository;
    private readonly addressRepository;
    private readonly profileRepository;
    private readonly attachmentRepository;
    private readonly dealerRepository;
    private readonly productRepository;
    private readonly categoryRepository;
    private readonly dealerProductMarginRepository;
    private readonly dealerCategoryMarginRepository;
    private readonly shopRepository;
    private readonly socialRepository;
    private readonly permissionRepository;
    private readonly cacheManager;
    private readonly analyticsService;
    private readonly authService;
    private readonly addressesService;
    constructor(userRepository: Repository<User>, addressRepository: Repository<Add>, profileRepository: Repository<Profile>, attachmentRepository: Repository<Attachment>, dealerRepository: Repository<Dealer>, productRepository: Repository<Product>, categoryRepository: Repository<Category>, dealerProductMarginRepository: Repository<DealerProductMargin>, dealerCategoryMarginRepository: Repository<DealerCategoryMargin>, shopRepository: Repository<Shop>, socialRepository: Repository<Social>, permissionRepository: Repository<Permission>, cacheManager: Cache, analyticsService: AnalyticsService, authService: AuthService, addressesService: AddressesService);
    create(createUserDto: CreateUserDto): Promise<User>;
    getUsers({ searchJoin, with: include, limit, page, name, orderBy, sortedBy, usrById, search, type, }: GetUsersDto): Promise<UserPaginator>;
    findOne(id: number): Promise<User>;
    update(id: number, updateUserDto: UpdateUserDto): Promise<User>;
    removeUser(id: number): Promise<string>;
    makeAdmin(user_id: number): Promise<User>;
    banUser(id: number): Promise<User>;
    activeUser(id: number): Promise<User>;
    createDealer(dealerData: DealerDto): Promise<Dealer>;
    getAllDealers(createdBy?: number): Promise<Dealer[]>;
    getDealerById(id: number): Promise<Dealer>;
    updateDealer(id: number, dealerData: DealerDto): Promise<Dealer>;
    deleteDealer(id: number): Promise<void>;
    createProfile(createProfileDto: CreateProfileDto): Promise<Profile>;
    updateProfile(updateProfileDto: UpdateProfileDto): Promise<Profile>;
}
